-- MySQL Script generated by MySQL Workbench
-- 10/16/17 09:58:38
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

/* SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; */
/* SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; */
/* SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES'; */

-- -----------------------------------------------------
-- Schema adventure
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema adventure
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS adventure DEFAULT CHARACTER SET utf8 ;
USE adventure ;

-- -----------------------------------------------------
-- Table `adventure`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.users ;

CREATE TABLE IF NOT EXISTS adventure.users (
  user_ID INT NOT NULL,
  user_name VARCHAR(45) NULL,
  email TEXT NULL,
  name VARCHAR(45) NULL,
  profile_picture VARCHAR(45) NULL,
  PRIMARY KEY (user_ID))
;


-- -----------------------------------------------------
-- Table `adventure`.`classes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.classes ;

CREATE TABLE IF NOT EXISTS adventure.classes (
  class_ID INT NOT NULL,
  class_name VARCHAR(45) NULL,
  base_dexterity INT NULL,
  base_strength INT NULL,
  base_charisma INT NULL,
  male_class_img TEXT NULL,
  female_class_img TEXT NULL,
  start_health_points INT NULL,
  PRIMARY KEY (class_ID))
;


-- -----------------------------------------------------
-- Table `adventure`.`character`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.character ;

CREATE TABLE IF NOT EXISTS adventure.character (
  character_ID INT NOT NULL,
  character_name VARCHAR(45) NULL,
  gender VARCHAR(45) NULL,
  dexterity INT NULL,
  strength INT NULL,
  charisma INT NULL,
  health_points INT NULL,
  alive SMALLINT NULL DEFAULT 1,
  class_ID INT NOT NULL,
  user_ID INT NOT NULL,
  PRIMARY KEY (character_ID, class_ID, user_ID)
 ,
  CONSTRAINT fk_character_classes1
    FOREIGN KEY (class_ID)
    REFERENCES adventure.classes (class_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_character_users1
    FOREIGN KEY (user_ID)
    REFERENCES adventure.users (user_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_character_classes1_idx ON adventure.character (class_ID ASC);
CREATE INDEX fk_character_users1_idx ON adventure.character (user_ID ASC);


-- -----------------------------------------------------
-- Table `adventure`.`stories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.stories ;

CREATE TABLE IF NOT EXISTS adventure.stories (
  story_ID INT NOT NULL,
  story_name VARCHAR(45) NULL,
  user_ID INT NOT NULL,
  story_description TEXT NULL,
  story_level INT NULL DEFAULT 1,
  completed_at TIMESTAMP(0) NULL,
  PRIMARY KEY (story_ID, user_ID)
 ,
  CONSTRAINT fk_stories_users1
    FOREIGN KEY (user_ID)
    REFERENCES adventure.users (user_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_stories_users1_idx ON adventure.stories (user_ID ASC);


-- -----------------------------------------------------
-- Table `adventure`.`encounter_background_images`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.encounter_background_images ;

CREATE TABLE IF NOT EXISTS adventure.encounter_background_images (
  encounter_background_images_ID INT NOT NULL,
  image_name VARCHAR(45) NULL,
  image_src TEXT NULL,
  PRIMARY KEY (encounter_background_images_ID))
;


-- -----------------------------------------------------
-- Table `adventure`.`encounters`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.encounters ;

CREATE TABLE IF NOT EXISTS adventure.encounters (
  encounter_ID INT NOT NULL,
  encounter_name VARCHAR(45) NULL,
  encounter_description TEXT NULL,
  final_encounter SMALLINT NULL DEFAULT 0,
  story_ID INT NOT NULL,
  encounter_background_images_ID INT NOT NULL,
  PRIMARY KEY (encounter_ID, story_ID, encounter_background_images_ID)
 ,
  CONSTRAINT fk_encounters_encounter_background_images
    FOREIGN KEY (encounter_background_images_ID)
    REFERENCES adventure.encounter_background_images (encounter_background_images_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_encounters_stories1
    FOREIGN KEY (story_ID)
    REFERENCES adventure.stories (story_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_encounters_encounter_background_images_idx ON adventure.encounters (encounter_background_images_ID ASC);
CREATE INDEX fk_encounters_stories1_idx ON adventure.encounters (story_ID ASC);


-- -----------------------------------------------------
-- Table `adventure`.`option_images`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.option_images ;

CREATE TABLE IF NOT EXISTS adventure.option_images (
  option_images_ID INT NOT NULL,
  image_name VARCHAR(45) NULL,
  image_src TEXT NULL,
  PRIMARY KEY (option_images_ID))
;


-- -----------------------------------------------------
-- Table `adventure`.`encounter_options`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.encounter_options ;

CREATE TABLE IF NOT EXISTS adventure.encounter_options (
  encounter_option_ID INT NOT NULL,
  encounter_ID INT NOT NULL,
  oprion_name VARCHAR(45) NULL,
  option_description TEXT NULL,
  option_odds VARCHAR(45) NULL,
  options_pass_case INT NULL,
  success_encounter INT NOT NULL,
  failed_encounter INT NOT NULL,
  option_images_ID INT NOT NULL,
  health_consquences INT NULL DEFAULT 0,
  PRIMARY KEY (encounter_option_ID, encounter_ID, success_encounter, failed_encounter, option_images_ID)
 ,
  CONSTRAINT fk_encounter_options_encounters1
    FOREIGN KEY (success_encounter)
    REFERENCES adventure.encounters (encounter_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_encounter_options_encounters2
    FOREIGN KEY (failed_encounter)
    REFERENCES adventure.encounters (encounter_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_encounter_options_option_images1
    FOREIGN KEY (option_images_ID)
    REFERENCES adventure.option_images (option_images_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_encounter_options_encounters3
    FOREIGN KEY (encounter_ID)
    REFERENCES adventure.encounters (encounter_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_encounter_options_encounters1_idx ON adventure.encounter_options (success_encounter ASC);
CREATE INDEX fk_encounter_options_encounters2_idx ON adventure.encounter_options (failed_encounter ASC);
CREATE INDEX fk_encounter_options_option_images1_idx ON adventure.encounter_options (option_images_ID ASC);
CREATE INDEX fk_encounter_options_encounters3_idx ON adventure.encounter_options (encounter_ID ASC);


-- -----------------------------------------------------
-- Table `adventure`.`story_has_character`
-- -----------------------------------------------------
DROP TABLE IF EXISTS adventure.story_has_character ;

CREATE TABLE IF NOT EXISTS adventure.story_has_character (
  story_ID INT NOT NULL,
  character_ID INT NOT NULL,
  last_encounter_ID INT NOT NULL,
  completed SMALLINT NULL DEFAULT 0,
  PRIMARY KEY (story_ID, character_ID, last_encounter_ID)
 ,
  CONSTRAINT fk_stories_has_character_stories1
    FOREIGN KEY (story_ID)
    REFERENCES adventure.stories (story_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_stories_has_character_character1
    FOREIGN KEY (character_ID)
    REFERENCES adventure.character (character_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_stories_has_character_encounters1
    FOREIGN KEY (last_encounter_ID)
    REFERENCES adventure.encounters (encounter_ID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_stories_has_character_character1_idx ON adventure.story_has_character (character_ID ASC);
CREATE INDEX fk_stories_has_character_stories1_idx ON adventure.story_has_character (story_ID ASC);
CREATE INDEX fk_stories_has_character_encounters1_idx ON adventure.story_has_character (last_encounter_ID ASC);


/* SET SQL_MODE=@OLD_SQL_MODE; */
/* SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; */
/* SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; */
